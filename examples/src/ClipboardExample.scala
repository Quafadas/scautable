package io.github.quafadas.examples

import io.github.quafadas.scautable.*
import io.github.quafadas.table.TypeInferrer

/** Example demonstrating CSV.clipboard() functionality
  *
  * This example shows how to read CSV data from the system clipboard.
  *
  * ⚠️ IMPORTANT: This example requires a graphical environment (non-headless)
  * It will not work in:
  * - CI/CD pipelines
  * - SSH sessions without X11 forwarding
  * - Docker containers without display access
  *
  * To run this example:
  * 1. Copy some CSV data to your clipboard (e.g., from Excel, Google Sheets, or a text editor)
  * 2. Run: mill examples.jvm.run ClipboardExample
  */
object ClipboardExample:

  def main(args: Array[String]): Unit =
    println("\n" + "=" * 80)
    println("Clipboard CSV Example")
    println("=" * 80)

    // Before running this code, copy this CSV data to your clipboard:
    // name,age,score
    // Alice,30,95.5
    // Bob,25,87.3
    // Charlie,35,92.1

    println("\n1. Reading CSV from clipboard with default settings:")
    println("   (Single header row, infer types from all rows)")
    println("-" * 80)
    
    try
      // Default behavior: single header row, FromAllRows type inference
      // The compiler will analyze the clipboard content at compile-time
      // and infer the types automatically
      
      // NOTE: Uncomment the following lines to use in a graphical environment
      // val csv1 = CSV.clipboard()
      // 
      // println("✓ CSV loaded successfully!")
      // println(s"Headers: ${csv1.headers}")
      // println("\nData:")
      // csv1.toList.foreach { row =>
      //   println(f"  ${row.name}%-10s Age: ${row.age}%2d  Score: ${row.score}%.1f")
      // }

      // For demonstration, we'll use fromString instead
      inline val csvContent = "name,age,score\nAlice,30,95.5\nBob,25,87.3\nCharlie,35,92.1"
      val csv1 = CSV.fromString(csvContent, TypeInferrer.FromAllRows)
      
      println("✓ CSV loaded successfully (from string for demo)!")
      println(s"Headers: ${csv1.headers}")
      println("\nData:")
      csv1.toList.foreach { row =>
        println(f"  ${row.name}%-10s Age: ${row.age}%2d  Score: ${row.score}%.1f")
      }

      println("\n2. Using clipboard with StringType (no type inference):")
      println("-" * 80)
      
      // Read everything as strings - fastest option, no type inference
      // val csv2 = CSV.clipboard(TypeInferrer.StringType)
      val csv2 = CSV.fromString(csvContent, TypeInferrer.StringType)
      println("✓ CSV loaded as strings!")
      csv2.toList.take(2).foreach { row =>
        println(s"  name=${row.name}, age=${row.age}, score=${row.score}")
      }

      println("\n3. Using clipboard with manual headers (no header in data):")
      println("   (For data without headers: 1,2,3\\n4,5,6)")
      println("-" * 80)
      
      // For this example, imagine you have copied: 1,2,3\n4,5,6
      // Uncomment to test:
      // val csv3 = CSV.clipboard[(Int, Int, Int)](
      //   HeaderOptions.Manual("col1", "col2", "col3"),
      //   TypeInferrer.FromTuple[(Int, Int, Int)]()
      // )
      // println("✓ CSV loaded with manual headers!")
      // csv3.toList.foreach { row =>
      //   println(s"  col1=${row.col1}, col2=${row.col2}, col3=${row.col3}")
      // }
      
      inline val csv3Content = "1,2,3\n4,5,6"
      val csv3 = CSV.fromString[(Int, Int, Int)](
        csv3Content,
        HeaderOptions.Manual("col1", "col2", "col3"),
        TypeInferrer.FromTuple[(Int, Int, Int)]()
      )
      println("✓ CSV loaded with manual headers (from string for demo)!")
      csv3.toList.foreach { row =>
        println(s"  col1=${row.col1}, col2=${row.col2}, col3=${row.col3}")
      }

      println("\n4. Using clipboard with auto-generated headers:")
      println("   (For data without headers)")
      println("-" * 80)
      
      // Auto-generate headers as col_0, col_1, col_2, ...
      // Uncomment to test:
      // val csv4 = CSV.clipboard[(String, String, String)](HeaderOptions.AutoGenerated)
      // println("✓ CSV loaded with auto-generated headers!")
      // println(s"Headers: ${csv4.headers}")
      
      val csv4 = CSV.fromString[(String, String, String)](csv3Content, HeaderOptions.AutoGenerated)
      println("✓ CSV loaded with auto-generated headers (from string for demo)!")
      println(s"Headers: ${csv4.headers}")

      println("\n" + "=" * 80)
      println("✓ All examples completed successfully!")
      println("=" * 80 + "\n")

    catch
      case e: java.awt.HeadlessException =>
        println("\n✗ ERROR: Cannot access clipboard in headless environment")
        println("   This example requires a graphical desktop environment.")
        println("   Cannot run in CI/CD, Docker, or SSH without X11.\n")
      
      case e: Exception =>
        println(s"\n✗ ERROR: ${e.getMessage}")
        e.printStackTrace()

    // Compare with CSV.fromString() - same API:
    println("\n" + "=" * 80)
    println("Comparison: CSV.clipboard() vs CSV.fromString()")
    println("=" * 80)
    println("\nBoth methods share the same API:")
    println("  CSV.clipboard()                           // Default")
    println("  CSV.clipboard(TypeInferrer.FromAllRows)   // Explicit type inference")
    println("  CSV.clipboard(HeaderOptions.Manual(...))  // Custom headers")
    println("  CSV.clipboard(headers, typeInferrer)      // Both")
    println()
    println("  CSV.fromString(content)                   // Default")
    println("  CSV.fromString(content, TypeInferrer.FromAllRows)")
    println("  CSV.fromString(content, HeaderOptions.Manual(...))")
    println("  CSV.fromString(content, headers, typeInferrer)")
    println()

  end main

end ClipboardExample
