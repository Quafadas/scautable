//| mill-version: 1.0.4
//| mill-jvm-version: 21
//| mvnDeps:
//| - io.github.quafadas:millSite_mill1_3.7:0.0.53

package build

import mill.*, mill.scalalib.*, mill.scalajslib.*
import mill.*, scalalib.*, publish.*

import mill.util.VcsVersion

object Config:
  val oslib = mvn"com.lihaoyi::os-lib:0.11.5"
  val scalatags = mvn"com.lihaoyi::scalatags::0.13.1"
  val fansi = mvn"com.lihaoyi::fansi::0.5.1"

  val laminar = mvn"com.raquo::laminar::17.2.1"
  val munit = mvn"org.scalameta::munit::1.1.1"
  val scalaVersion = "3.7.2"
  val scalaJSVersion = "1.19.0"
end Config

// mill __.compiledClassesAndSemanticDbFiles
trait Common extends ScalaModule:
  def scalaVersion = Config.scalaVersion

  override def mvnDeps = super.mvnDeps() ++ Seq(
    Config.scalatags,
    Config.oslib,
    Config.fansi
  )
  override def scalacOptions = super.scalacOptions() ++ Seq("-Xmax-inlines", "128")
end Common

trait CommonJS extends Common with ScalaJSModule:
  def scalaJSVersion = "1.19.0"
  override def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"org.scala-js::scalajs-dom::2.8.1",
    mvn"org.scala-js::scalajs-java-securerandom::1.0.0".withDottyCompat(scalaVersion()),
    Config.laminar
  )
end CommonJS

trait PublishModule extends mill.scalalib.PublishModule:
  override def publishVersion = Task(VcsVersion.vcsState().format())

  override def pomSettings = Task {
    PomSettings(
      description = "Automatically generate html tables from scala case classes",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/scautable",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "scautable"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }
end PublishModule

trait CommonTests extends TestModule.Munit:

  // override def testFramework = "munit.runner.Framework"
  override def mvnDeps = super.mvnDeps() ++ Seq(
    Config.munit
  )
end CommonTests

trait ShareCompileResources extends ScalaModule:
  override def compileResources = super.compileResources() ++ resources()
end ShareCompileResources
