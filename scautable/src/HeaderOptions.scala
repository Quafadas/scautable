package io.github.quafadas.scautable
import io.github.quafadas.scautable.CSVParser.*


import scala.quoted.*

enum HeaderOptions {
  case AutoGenerated
  case H(headers: String*)
  case R(rows: Int)
}

object HeaderOptions:
  inline def Default: HeaderOptions = HeaderOptions.R(0)

  extension (rows: Iterator[String])
    def headers(headers: HeaderOptions): (Seq[String], Iterator[String]) =
      headers match
        case H(seq @ _*) =>
          (seq, rows)

        case R(numHeaderRows) =>
          if (numHeaderRows < 0) {
            throw new IllegalArgumentException("Number of header rows (R) cannot be negative.")
          } else {
            val headerLinesRaw: Seq[String] = rows.take(numHeaderRows + 1).toSeq

            val parsedHeaderSegments: Seq[Seq[String]] = headerLinesRaw.map(line => CSVParser.parseLine(line))

            val combinedHeaders: Seq[String] = {
              val maxCols = parsedHeaderSegments.map(_.size).maxOption.getOrElse(0)

              val paddedSegments = parsedHeaderSegments.map { segment =>
                segment ++ Seq.fill(maxCols - segment.size)("")
              }

              paddedSegments
                .transpose
                .map { columnParts =>
                  columnParts.filter(_.nonEmpty).mkString(" ").trim
                }
                .toSeq
            }
            (combinedHeaders, rows)
          }


        case AutoGenerated =>
          val buffered = rows.buffered
          val firstLine = CSVParser.parseLine(buffered.head)
          val headers = firstLine.indices.map(i => s"col_$i")
          (headers, buffered)


  given FromExpr[HeaderOptions] with
    def unapply(x: Expr[HeaderOptions])(using Quotes): Option[HeaderOptions] =
      import quotes.reflect.*

      x match
        case '{ HeaderOptions.AutoGenerated } =>
          Some(HeaderOptions.AutoGenerated)

        case '{ HeaderOptions.H(${Varargs(headers)}*) } =>
          val strings = headers.map(_.valueOrAbort)
          Some(HeaderOptions.H(strings*))

        case '{ HeaderOptions.R(${Expr(row)}) } => Some(HeaderOptions.R(row))

        case '{ HeaderOptions.Default } => Some(HeaderOptions.Default) 

        case x =>
          report.info(s"${x.show} from report.info")
          None
