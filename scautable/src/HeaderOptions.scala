package io.github.quafadas.scautable
import io.github.quafadas.scautable.CSVParser.*

import scala.quoted.*

enum HeaderOptions:
  case AutoGenerated
  case Manual(headers: String*)
  case FromRows(merge: Int, dropFirst: Int = 0)
end HeaderOptions

object HeaderOptions:
  inline def Default: HeaderOptions = HeaderOptions.FromRows(merge = 1, dropFirst = 0)

  extension (rows: Iterator[String])
    def headers(headers: HeaderOptions): (Seq[String], Iterator[String]) =
      headers match
        case Manual(seq*) =>
          (seq, rows)

        case FromRows(merge, dropFirst) =>

          val rowsAfterDrop = rows.drop(dropFirst)

          val headerLinesRaw: Seq[String] = rowsAfterDrop.take(merge).toSeq

          val parsedHeaderSegments: Seq[Seq[String]] = headerLinesRaw.map(line => CSVParser.parseLine(line))

          val combinedHeaders: Seq[String] =
            val maxCols = parsedHeaderSegments.map(_.size).maxOption.getOrElse(0)

            val paddedSegments = parsedHeaderSegments.map { segment =>
              segment ++ Seq.fill(maxCols - segment.size)("")
            }

            paddedSegments.transpose.map { columnParts =>
              columnParts.filter(_.nonEmpty).mkString(" ").trim
            }.toSeq
          end combinedHeaders
          (combinedHeaders, rows)

        case AutoGenerated =>
          val buffered = rows.buffered
          val firstLine = CSVParser.parseLine(buffered.head)
          val headers = firstLine.indices.map(i => s"col_$i")
          (headers, buffered)
  end extension

  given FromExpr[HeaderOptions] with
    def unapply(x: Expr[HeaderOptions])(using Quotes): Option[HeaderOptions] =
      import quotes.reflect.*

      x match
        case '{ HeaderOptions.AutoGenerated } =>
          Some(HeaderOptions.AutoGenerated)

        case '{ HeaderOptions.Manual(${ Varargs(headers) }*) } =>
          val strings = headers.map(_.valueOrAbort)
          Some(HeaderOptions.Manual(strings*))

        case '{ HeaderOptions.FromRows(${ Expr(merge) }, ${ Expr(dropFirst) }) } =>
          Some(HeaderOptions.FromRows(merge, dropFirst))

        case '{ HeaderOptions.FromRows(${ Expr(merge) }) } =>
          Some(HeaderOptions.FromRows(merge))

        case '{ HeaderOptions.Default } => Some(HeaderOptions.Default)

        case x =>
          report.info(s"${x.show} from report.info")
          None
      end match
    end unapply
  end given
end HeaderOptions
